// Generated by CoffeeScript 1.4.0
(function() {

  module('Backpack.Publishable');

  test('Model publishes with inheritance', function() {
    var TestModel, model;
    TestModel = Backpack.Model.extend({
      publishers: {
        onTestEvent: 'TEST_EVENT'
      },
      onTestEvent: function(arg1, arg2) {}
    });
    model = new TestModel();
    Backbone.on('TEST_EVENT', function(arg1, arg2) {
      equal(arg1, 'x', 'callback function called and 1st argument passed');
      equal(arg2, 2, 'callback function called and 2nd argument passed');
    });
    model.onTestEvent('x', 2);
  });

  test('Model publishes with initialization parameter', function() {
    var model;
    model = new Backpack.Model(null, {
      publishers: {
        onTestEvent: 'TEST_EVENT'
      },
      onTestEvent: function(arg1, arg2) {}
    });
    Backbone.on('TEST_EVENT', function(arg1, arg2) {
      equal(arg1, 'x', 'callback function called and 1st argument passed');
      equal(arg2, 2, 'callback function called and 2nd argument passed');
    });
    model.onTestEvent('x', 2);
  });

  test('Collection publishes with inheritance', function() {
    var TestCollection, collection;
    TestCollection = Backpack.Collection.extend({
      publishers: {
        onTestEvent: 'TEST_EVENT'
      },
      onTestEvent: function(arg1, arg2) {}
    });
    collection = new TestCollection();
    Backbone.on('TEST_EVENT', function(arg1, arg2) {
      equal(arg1, 'x', 'callback function called and 1st argument passed');
      equal(arg2, 2, 'callback function called and 2nd argument passed');
    });
    collection.onTestEvent('x', 2);
  });

  test('Collection publishes with initialization parameter', function() {
    var collection;
    collection = new Backpack.Collection(null, {
      publishers: {
        onTestEvent: 'TEST_EVENT'
      },
      onTestEvent: function(arg1, arg2) {}
    });
    Backbone.on('TEST_EVENT', function(arg1, arg2) {
      equal(arg1, 'x', 'callback function called and 1st argument passed');
      equal(arg2, 2, 'callback function called and 2nd argument passed');
    });
    collection.onTestEvent('x', 2);
  });

  test('View publishes with inheritance', function() {
    var TestView, view;
    TestView = Backpack.View.extend({
      publishers: {
        onTestEvent: 'TEST_EVENT'
      },
      onTestEvent: function(arg1, arg2) {}
    });
    view = new TestView();
    Backbone.on('TEST_EVENT', function(arg1, arg2) {
      equal(arg1, 'x', 'callback function called and 1st argument passed');
      equal(arg2, 2, 'callback function called and 2nd argument passed');
    });
    view.onTestEvent('x', 2);
  });

  test('View publishes with initialization parameter', function() {
    var view;
    view = new Backpack.View({
      publishers: {
        onTestEvent: 'TEST_EVENT'
      },
      onTestEvent: function(arg1, arg2) {}
    });
    Backbone.on('TEST_EVENT', function(arg1, arg2) {
      equal(arg1, 'x', 'callback function called and 1st argument passed');
      equal(arg2, 2, 'callback function called and 2nd argument passed');
    });
    view.onTestEvent('x', 2);
  });

  test('Class publishes with inheritance', function() {
    var TestClass, instance;
    TestClass = Backpack.Class.extend({
      publishers: {
        onTestEvent: 'TEST_EVENT'
      },
      onTestEvent: function(arg1, arg2) {}
    });
    instance = new TestClass();
    Backbone.on('TEST_EVENT', function(arg1, arg2) {
      equal(arg1, 'x', 'callback function called and 1st argument passed');
      equal(arg2, 2, 'callback function called and 2nd argument passed');
    });
    instance.onTestEvent('x', 2);
  });

  test('Class publishes with initialization parameter', function() {
    var instance;
    instance = new Backpack.Class({
      publishers: {
        onTestEvent: 'TEST_EVENT'
      },
      onTestEvent: function(arg1, arg2) {}
    });
    Backbone.on('TEST_EVENT', function(arg1, arg2) {
      equal(arg1, 'x', 'callback function called and 1st argument passed');
      equal(arg2, 2, 'callback function called and 2nd argument passed');
    });
    instance.onTestEvent('x', 2);
  });

}).call(this);
