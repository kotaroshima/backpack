// Generated by CoffeeScript 1.4.0
(function() {

  Backbone.sync = function() {};

  module('Backpack.attach');

  test('attach and detach', function() {
    var handler, obj;
    obj = {
      counter: 0,
      event: function() {}
    };
    handler = Backpack.attach(obj, 'event', function() {
      obj.counter++;
    });
    obj.event();
    equal(obj.counter, 1, 'counter should be incremented.');
    obj.event();
    obj.event();
    obj.event();
    obj.event();
    equal(obj.counter, 5, 'counter should be incremented five times.');
    handler.detach();
    obj.event();
    equal(obj.counter, 5, 'counter should not be incremented after detach.');
    obj.event();
    obj.event();
    obj.event();
    equal(obj.counter, 5, 'counter should not be incremented after detach.');
  });

  test('attach with arguments', function() {
    var obj;
    obj = {
      counter: 0,
      event: function(arg1, arg2) {}
    };
    Backpack.attach(obj, 'event', function(arg1, arg2) {
      equal(arg1, 'x', 'first argument should be passed in the callback function');
      equal(arg2, 2, 'second argument should be passed in the callback function');
    });
    obj.event('x', 2);
  });

  test('attach multiple events', function() {
    var handler1, handler2, obj;
    obj = {
      counter1: 0,
      counter2: 0,
      event: function() {}
    };
    handler1 = Backpack.attach(obj, 'event', function() {
      obj.counter1++;
    });
    handler2 = Backpack.attach(obj, 'event', function() {
      obj.counter2++;
    });
    obj.event();
    equal(obj.counter1, 1, 'counter1 should be incremented.');
    equal(obj.counter2, 1, 'counter2 should be incremented.');
    obj.event();
    obj.event();
    obj.event();
    obj.event();
    equal(obj.counter1, 5, 'counter1 should be incremented five times.');
    equal(obj.counter2, 5, 'counter2 should be incremented five times.');
    handler2.detach();
    obj.event();
    equal(obj.counter1, 6, 'counter1 should be incremented six times.');
    equal(obj.counter2, 5, 'counter2 should be incremented five times.');
    handler1.detach();
    obj.event();
    equal(obj.counter1, 6, 'counter1 should be incremented six times.');
    equal(obj.counter2, 5, 'counter2 should be incremented five times.');
  });

  module('Backpack.Model');

  test('extend with plugins', function() {
    var TestModel, model, testPlugin1, testPlugin2;
    testPlugin1 = {
      setup: function() {
        this.prop1 = 'hello';
      },
      cleanup: function() {
        this.prop1 = 'bye';
      }
    };
    testPlugin2 = {
      setup: function() {
        this.prop2 = 'konichiwa';
      },
      cleanup: function() {
        this.prop2 = 'sayonara';
      }
    };
    TestModel = Backpack.Model.extend({
      plugins: [testPlugin1, testPlugin2]
    });
    model = new TestModel();
    equal(model.prop1, 'hello', 'setup called for first plugin');
    equal(model.prop2, 'konichiwa', 'setup called for second plugin');
    model.destroy();
    equal(model.prop1, 'bye', 'cleanup called for first plugin');
    equal(model.prop2, 'sayonara', 'cleanup called for second plugin');
  });

  test('initialize with plugins', function() {
    var model, testPlugin1, testPlugin2;
    testPlugin1 = {
      setup: function() {
        this.prop1 = 'hello';
      },
      cleanup: function() {
        this.prop1 = 'bye';
      }
    };
    testPlugin2 = {
      setup: function() {
        this.prop2 = 'konichiwa';
      },
      cleanup: function() {
        this.prop2 = 'sayonara';
      }
    };
    model = new Backpack.Model(null, {
      plugins: [testPlugin1, testPlugin2]
    });
    equal(model.prop1, 'hello', 'setup called for first plugin');
    equal(model.prop2, 'konichiwa', 'setup called for second plugin');
    model.destroy();
    equal(model.prop1, 'bye', 'cleanup called for first plugin');
    equal(model.prop2, 'sayonara', 'cleanup called for second plugin');
  });

  test('override extend plugins with initialize plugins', function() {
    var TestModel, model, testPlugin1, testPlugin2;
    testPlugin1 = {
      setup: function() {
        this.prop1 = 'hello';
      },
      cleanup: function() {
        this.prop1 = 'bye';
      }
    };
    testPlugin2 = {
      setup: function() {
        this.prop2 = 'konichiwa';
      },
      cleanup: function() {
        this.prop2 = 'sayonara';
      }
    };
    TestModel = Backpack.Model.extend({
      plugins: [testPlugin1]
    });
    model = new TestModel(null, {
      plugins: [testPlugin2]
    });
    notEqual(model.prop1, 'hello', 'setup not called for extend plugin');
    equal(model.prop2, 'konichiwa', 'setup called for initialize plugin');
    model.destroy();
    notEqual(model.prop1, 'bye', 'cleanup not called for extend plugin');
    equal(model.prop2, 'sayonara', 'cleanup called for initialize plugin');
  });

  module('Backpack.Collection');

  test('extend with plugins', function() {
    var TestCollection, collection, testPlugin1, testPlugin2;
    testPlugin1 = {
      setup: function() {
        this.prop1 = 'hello';
      },
      cleanup: function() {
        this.prop1 = 'bye';
      }
    };
    testPlugin2 = {
      setup: function() {
        this.prop2 = 'konichiwa';
      },
      cleanup: function() {
        this.prop2 = 'sayonara';
      }
    };
    TestCollection = Backpack.Collection.extend({
      plugins: [testPlugin1, testPlugin2]
    });
    collection = new TestCollection();
    equal(collection.prop1, 'hello', 'setup called for first plugin');
    equal(collection.prop2, 'konichiwa', 'setup called for second plugin');
    collection.destroy();
    equal(collection.prop1, 'bye', 'cleanup called for first plugin');
    equal(collection.prop2, 'sayonara', 'cleanup called for second plugin');
  });

  test('initialize with plugins', function() {
    var collection, testPlugin1, testPlugin2;
    testPlugin1 = {
      setup: function() {
        this.prop1 = 'hello';
      },
      cleanup: function() {
        this.prop1 = 'bye';
      }
    };
    testPlugin2 = {
      setup: function() {
        this.prop2 = 'konichiwa';
      },
      cleanup: function() {
        this.prop2 = 'sayonara';
      }
    };
    collection = new Backpack.Collection(null, {
      plugins: [testPlugin1, testPlugin2]
    });
    equal(collection.prop1, 'hello', 'setup called for first plugin');
    equal(collection.prop2, 'konichiwa', 'setup called for second plugin');
    collection.destroy();
    equal(collection.prop1, 'bye', 'cleanup called for first plugin');
    equal(collection.prop2, 'sayonara', 'cleanup called for second plugin');
  });

  test('override extend plugins with initialize plugins', function() {
    var TestCollection, collection, testPlugin1, testPlugin2;
    testPlugin1 = {
      setup: function() {
        this.prop1 = 'hello';
      },
      cleanup: function() {
        this.prop1 = 'bye';
      }
    };
    testPlugin2 = {
      setup: function() {
        this.prop2 = 'konichiwa';
      },
      cleanup: function() {
        this.prop2 = 'sayonara';
      }
    };
    TestCollection = Backpack.Collection.extend({
      plugins: [testPlugin1]
    });
    collection = new TestCollection(null, {
      plugins: [testPlugin2]
    });
    notEqual(collection.prop1, 'hello', 'setup not called for extend plugin');
    equal(collection.prop2, 'konichiwa', 'setup called for initialize plugin');
    collection.destroy();
    notEqual(collection.prop1, 'bye', 'cleanup not called for extend plugin');
    equal(collection.prop2, 'sayonara', 'cleanup called for initialize plugin');
  });

  module('Backpack.View');

  test('extend with plugins', function() {
    var TestView, testPlugin1, testPlugin2, view;
    testPlugin1 = {
      setup: function() {
        this.prop1 = 'hello';
      },
      cleanup: function() {
        this.prop1 = 'bye';
      }
    };
    testPlugin2 = {
      setup: function() {
        this.prop2 = 'konichiwa';
      },
      cleanup: function() {
        this.prop2 = 'sayonara';
      }
    };
    TestView = Backpack.View.extend({
      plugins: [testPlugin1, testPlugin2]
    });
    view = new TestView();
    equal(view.prop1, 'hello', 'setup called for first plugin');
    equal(view.prop2, 'konichiwa', 'setup called for second plugin');
    view.destroy();
    equal(view.prop1, 'bye', 'cleanup called for first plugin');
    equal(view.prop2, 'sayonara', 'cleanup called for second plugin');
  });

  test('initialize with plugins', function() {
    var testPlugin1, testPlugin2, view;
    testPlugin1 = {
      setup: function() {
        this.prop1 = 'hello';
      },
      cleanup: function() {
        this.prop1 = 'bye';
      }
    };
    testPlugin2 = {
      setup: function() {
        this.prop2 = 'konichiwa';
      },
      cleanup: function() {
        this.prop2 = 'sayonara';
      }
    };
    view = new Backpack.View({
      plugins: [testPlugin1, testPlugin2]
    });
    equal(view.prop1, 'hello', 'setup called for first plugin');
    equal(view.prop2, 'konichiwa', 'setup called for second plugin');
    view.destroy();
    equal(view.prop1, 'bye', 'cleanup called for first plugin');
    equal(view.prop2, 'sayonara', 'cleanup called for second plugin');
  });

  test('override extend plugins with initialize plugins', function() {
    var TestView, testPlugin1, testPlugin2, view;
    testPlugin1 = {
      setup: function() {
        this.prop1 = 'hello';
      },
      cleanup: function() {
        this.prop1 = 'bye';
      }
    };
    testPlugin2 = {
      setup: function() {
        this.prop2 = 'konichiwa';
      },
      cleanup: function() {
        this.prop2 = 'sayonara';
      }
    };
    TestView = Backpack.View.extend({
      plugins: [testPlugin1]
    });
    view = new TestView({
      plugins: [testPlugin2]
    });
    notEqual(view.prop1, 'hello', 'setup not called for extend plugin');
    equal(view.prop2, 'konichiwa', 'setup called for initialize plugin');
    view.destroy();
    notEqual(view.prop1, 'bye', 'cleanup not called for extend plugin');
    equal(view.prop2, 'sayonara', 'cleanup called for initialize plugin');
  });

  module('Backpack.Class');

  test('extend with plugins', function() {
    var TestClass, instance, testPlugin1, testPlugin2;
    testPlugin1 = {
      setup: function() {
        this.prop1 = 'hello';
      },
      cleanup: function() {
        this.prop1 = 'bye';
      }
    };
    testPlugin2 = {
      setup: function() {
        this.prop2 = 'konichiwa';
      },
      cleanup: function() {
        this.prop2 = 'sayonara';
      }
    };
    TestClass = Backpack.Class.extend({
      plugins: [testPlugin1, testPlugin2]
    });
    instance = new TestClass();
    equal(instance.prop1, 'hello', 'setup called for first plugin');
    equal(instance.prop2, 'konichiwa', 'setup called for second plugin');
    instance.destroy();
    equal(instance.prop1, 'bye', 'cleanup called for first plugin');
    equal(instance.prop2, 'sayonara', 'cleanup called for second plugin');
  });

  test('initialize with plugins', function() {
    var instance, testPlugin1, testPlugin2;
    testPlugin1 = {
      setup: function() {
        this.prop1 = 'hello';
      },
      cleanup: function() {
        this.prop1 = 'bye';
      }
    };
    testPlugin2 = {
      setup: function() {
        this.prop2 = 'konichiwa';
      },
      cleanup: function() {
        this.prop2 = 'sayonara';
      }
    };
    instance = new Backpack.Class({
      plugins: [testPlugin1, testPlugin2]
    });
    equal(instance.prop1, 'hello', 'setup called for first plugin');
    equal(instance.prop2, 'konichiwa', 'setup called for second plugin');
    instance.destroy();
    equal(instance.prop1, 'bye', 'cleanup called for first plugin');
    equal(instance.prop2, 'sayonara', 'cleanup called for second plugin');
  });

  test('override extend plugins with initialize plugins', function() {
    var TestClass, instance, testPlugin1, testPlugin2;
    testPlugin1 = {
      setup: function() {
        this.prop1 = 'hello';
      },
      cleanup: function() {
        this.prop1 = 'bye';
      }
    };
    testPlugin2 = {
      setup: function() {
        this.prop2 = 'konichiwa';
      },
      cleanup: function() {
        this.prop2 = 'sayonara';
      }
    };
    TestClass = Backpack.Class.extend({
      plugins: [testPlugin1]
    });
    instance = new TestClass({
      plugins: [testPlugin2]
    });
    notEqual(instance.prop1, 'hello', 'setup not called for extend plugin');
    equal(instance.prop2, 'konichiwa', 'setup called for initialize plugin');
    instance.destroy();
    notEqual(instance.prop1, 'bye', 'cleanup not called for extend plugin');
    equal(instance.prop2, 'sayonara', 'cleanup called for initialize plugin');
  });

}).call(this);
