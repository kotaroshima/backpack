// Generated by CoffeeScript 1.6.2
(function() {
  var assert_visible_view;

  assert_visible_view = function(stackView, visibleIndex) {
    _.each(stackView.children, function(view, index) {
      equal(view.$el.is(':hidden'), visibleIndex !== index);
    });
  };

  module('Backpack.StackView', {
    teardown: function() {
      if (this.stackView) {
        this.stackView.destroy();
      }
    }
  });

  test('initialize by passing children', 2, function() {
    var stackView, view1, view2;

    view1 = new Backpack.View({
      initialize: function(options) {
        this.$el.html('<div style="background-color:blue">View1</div>');
      }
    });
    view2 = new Backpack.View({
      initialize: function(options) {
        this.$el.html('<div style="background-color:red">View2</div>');
      }
    });
    stackView = this.stackView = new Backpack.StackView({
      children: [view1, view2],
      selectedIndex: 0
    });
    $('#testNode').append(stackView.$el);
    assert_visible_view(stackView, 0);
  });

  test('no selectedIndex', 2, function() {
    var stackView, view1, view2;

    view1 = new Backpack.View({
      initialize: function(options) {
        this.$el.html('<div style="background-color:blue">View1</div>');
      }
    });
    view2 = new Backpack.View({
      initialize: function(options) {
        this.$el.html('<div style="background-color:red">View2</div>');
      }
    });
    stackView = this.stackView = new Backpack.StackView({
      children: [view1, view2]
    });
    $('#testNode').append(stackView.$el);
    assert_visible_view(stackView, 0);
  });

  test('display view specified by selectedIndex', 2, function() {
    var stackView, view1, view2;

    view1 = new Backpack.View({
      initialize: function(options) {
        this.$el.html('<div style="background-color:blue">View1</div>');
      }
    });
    view2 = new Backpack.View({
      initialize: function(options) {
        this.$el.html('<div style="background-color:red">View2</div>');
      }
    });
    stackView = this.stackView = new Backpack.StackView({
      children: [view1, view2],
      selectedIndex: 1
    });
    $('#testNode').append(stackView.$el);
    assert_visible_view(stackView, 1);
  });

  asyncTest('attach navigation event', 4, function() {
    var stackView, view1, view2;

    view1 = new Backpack.View({
      name: 'view1',
      initialize: function(options) {
        this.$el.html('<div style="background-color:blue">View1</div>');
      },
      showNext: function() {}
    });
    view2 = new Backpack.View({
      name: 'view2',
      initialize: function(options) {
        this.$el.html('<div style="background-color:red">View2</div>');
      },
      showPrevious: function() {}
    });
    stackView = this.stackView = new Backpack.StackView({
      children: [view1, view2],
      selectedIndex: 0,
      navigationEvents: {
        view1: {
          event: 'showNext',
          target: 'view2'
        },
        view2: {
          event: 'showPrevious',
          target: 'view1'
        }
      }
    });
    $('#testNode').append(stackView.$el);
    view1.showNext();
    view2.$el.promise().done(function() {
      assert_visible_view(stackView, 1);
      view2.showPrevious();
      view1.$el.promise().done(function() {
        assert_visible_view(stackView, 0);
        start();
      });
    });
  });

  asyncTest('attach navigation event in array', 12, function() {
    var stackView, view1, view2, view3;

    view1 = new Backpack.View({
      name: 'view1',
      initialize: function(options) {
        this.$el.html('<div style="background-color:blue">View1</div>');
      },
      showView2: function() {},
      showView3: function() {}
    });
    view2 = new Backpack.View({
      name: 'view2',
      initialize: function(options) {
        this.$el.html('<div style="background-color:yellow">View2</div>');
      },
      showView1: function() {}
    });
    view3 = new Backpack.View({
      name: 'view3',
      initialize: function(options) {
        this.$el.html('<div style="background-color:red">View3</div>');
      },
      showView1: function() {}
    });
    stackView = this.stackView = new Backpack.StackView({
      children: [view1, view2, view3],
      selectedIndex: 0,
      navigationEvents: {
        view1: [
          {
            event: 'showView2',
            target: 'view2'
          }, {
            event: 'showView3',
            target: 'view3'
          }
        ],
        view2: {
          event: 'showView1',
          target: 'view1'
        },
        view3: {
          event: 'showView1',
          target: 'view1'
        }
      }
    });
    $('#testNode').append(stackView.$el);
    assert_visible_view(stackView, 0);
    view1.showView2();
    view2.$el.promise().done(function() {
      assert_visible_view(stackView, 1);
      view2.showView1();
      view1.$el.promise().done(function() {
        assert_visible_view(stackView, 0);
        view1.showView3();
        view3.$el.promise().done(function() {
          assert_visible_view(stackView, 2);
          start();
        });
      });
    });
  });

  asyncTest('attach navigation event with back', 18, function() {
    var stackView, view1, view2, view3;

    view1 = new Backpack.View({
      name: 'view1',
      initialize: function(options) {
        this.$el.html('<div style="background-color:blue">View1</div>');
      },
      showView2: function() {},
      showView3: function() {}
    });
    view2 = new Backpack.View({
      name: 'view2',
      initialize: function(options) {
        this.$el.html('<div style="background-color:yellow">View2</div>');
      },
      showView3: function() {}
    });
    view3 = new Backpack.View({
      name: 'view3',
      initialize: function(options) {
        this.$el.html('<div style="background-color:red">View3</div>');
      },
      showPrevious: function() {}
    });
    stackView = this.stackView = new Backpack.StackView({
      children: [view1, view2, view3],
      selectedIndex: 0,
      navigationEvents: {
        view1: [
          {
            event: 'showView2',
            target: 'view2'
          }, {
            event: 'showView3',
            target: 'view3'
          }
        ],
        view2: {
          event: 'showView3',
          target: 'view3'
        },
        view3: {
          event: 'showPrevious',
          back: true
        }
      }
    });
    $('#testNode').append(stackView.$el);
    assert_visible_view(stackView, 0);
    view1.showView3();
    view3.$el.promise().done(function() {
      assert_visible_view(stackView, 2);
      view3.showPrevious();
      view1.$el.promise().done(function() {
        assert_visible_view(stackView, 0);
        view1.showView2();
        view2.$el.promise().done(function() {
          assert_visible_view(stackView, 1);
          view2.showView3();
          view3.$el.promise().done(function() {
            assert_visible_view(stackView, 2);
            view3.showPrevious();
            view2.$el.promise().done(function() {
              assert_visible_view(stackView, 1);
              start();
            });
          });
        });
      });
    });
  });

}).call(this);
