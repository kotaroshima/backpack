// Generated by CoffeeScript 1.6.2
(function() {
  var Backpack, Clazz, applyOptions, cleanup, extend, root, setup,
    __hasProp = {}.hasOwnProperty;

  root = this;

  Backpack = root.Backpack = {};

  Backpack.attach = function(context, method, callback) {
    var origFunc;

    origFunc = context[method];
    context[method] = function() {
      var ret;

      ret = origFunc.apply(context, arguments);
      if (callback) {
        callback.apply(this, arguments);
      }
      return ret;
    };
    return {
      detach: function() {
        context[method] = origFunc;
      }
    };
  };

  Backpack.defaultPlugins = [];

  applyOptions = function(self, options) {
    var key, plugins, value;

    if (options == null) {
      options = {};
    }
    self.plugins = options.plugins || self.plugins;
    plugins = _.clone(Backpack.defaultPlugins).concat(self.plugins || []);
    self.setups = [];
    self.cleanups = [];
    _.each(plugins, function(pi) {
      var key, value;

      for (key in pi) {
        if (!__hasProp.call(pi, key)) continue;
        value = pi[key];
        if (key !== 'setup' && key !== 'cleanup' && key !== 'staticProps' && !self[key]) {
          self[key] = value;
        }
      }
      if (pi.setup) {
        self.setups.push(pi.setup);
      }
      if (pi.cleanup) {
        self.cleanups.push(pi.cleanup);
      }
    });
    for (key in options) {
      if (!__hasProp.call(options, key)) continue;
      value = options[key];
      if (key !== 'plugins' && key !== 'initialize') {
        self[key] = value;
      }
    }
  };

  setup = function(self) {
    _.each(self.setups, function(su) {
      su.apply(self);
    });
  };

  cleanup = function(self) {
    _.each(self.cleanups, function(cu) {
      cu.apply(self);
    });
  };

  extend = function(protoProps, staticProps) {
    var child;

    child = Backbone.Model.extend.call(this, protoProps, staticProps);
    child.prototype.plugins = protoProps.plugins || [];
    if (protoProps.plugins) {
      _.each(protoProps.plugins, function(pi) {
        if (pi.staticProps) {
          _.extend(child, pi.staticProps);
        }
      });
    }
    return child;
  };

  Clazz = Backpack.Class = function() {
    this.cid = _.uniqueId('obj');
    this.initialize.apply(this, arguments);
  };

  _.extend(Clazz.prototype, Backbone.Events, {
    initialize: function() {
      var options;

      options = arguments.length > 0 ? arguments[arguments.length - 1] : {};
      applyOptions(this, options);
      if (options != null ? options.initialize : void 0) {
        options.initialize.apply(this, arguments);
      }
      setup(this);
    },
    destroy: function() {
      cleanup(this);
    }
  });

  Clazz.extend = extend;

  Backpack.Model = Backbone.Model.extend({
    initialize: function(attributes, options) {
      applyOptions(this, options);
      if (options != null ? options.initialize : void 0) {
        options.initialize.apply(this, arguments);
      }
      setup(this);
    },
    destroy: function(options) {
      cleanup(this);
      Backbone.Model.prototype.destroy.apply(this, arguments);
    }
  });

  Backpack.Model.extend = extend;

  Backpack.Collection = Backbone.Collection.extend({
    initialize: function(models, options) {
      applyOptions(this, options);
      if (options != null ? options.initialize : void 0) {
        options.initialize.apply(this, arguments);
      }
      setup(this);
    },
    destroy: function() {
      cleanup(this);
    }
  });

  Backpack.Collection.extend = extend;

  Backpack.View = Backbone.View.extend({
    initialize: function(options) {
      applyOptions(this, options);
      if (options != null ? options.initialize : void 0) {
        options.initialize.apply(this, arguments);
      }
      setup(this);
    },
    /*
    * Override so that event handler works even if method has been dynamically overwritten
    * TODO : submit a patch to Backbone
    */

    delegateEvents: function(events) {
      var bindMethod, eventName, key, match, method, methodName, selector,
        _this = this;

      if (!(events || (events = _.result(this, 'events')))) {
        return this;
      }
      this.undelegateEvents();
      bindMethod = function(methodName) {
        var method;

        method = function(e) {
          return _this[methodName](e);
        };
        return _.bind(method, _this);
      };
      for (key in events) {
        if (!__hasProp.call(events, key)) continue;
        methodName = events[key];
        if (!this[methodName] || !_.isFunction(this[methodName])) {
          continue;
        }
        match = key.match(/^(\S+)\s*(.*)$/);
        eventName = match[1];
        selector = match[2];
        method = bindMethod(methodName);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },
    remove: function() {
      cleanup(this);
      Backbone.View.prototype.remove.apply(this, arguments);
    },
    destroy: function() {
      this.remove();
    }
  });

  Backpack.View.extend = extend;

  Backpack.Attachable = {
    setup: function() {
      this._attached = [];
    },
    /*
    * Attaches an event handler, which will be detached when this object is destroyed
    * if 2 arguments:
    * @param {String} method Name of this object's method to which attach event
    * @param {Function} cb Callback function
    * if 3 arguments:
    * @param {Object} object Object to which attach event
    * @param {String} method Method name of object to which attach event
    * @param {Function} cb Callback function
    */

    attach: function() {
      var handler;

      switch (arguments.length) {
        case 2:
          handler = Backpack.attach(this, arguments[0], arguments[1]);
          break;
        case 3:
          handler = Backpack.attach(arguments[0], arguments[1], arguments[2]);
      }
      this._attached.push(handler);
      return handler;
    },
    /*
    * Detaches an event and it will be removed from event handler list which will be cleaned up on destroy
    * @param {Object} handler Event handler
    */

    detach: function(handler) {
      var index, ret;

      index = _.indexOf(this._attached, handler);
      ret = false;
      if (index !== -1) {
        this._attached.splice(index, 1);
        handler.detach();
        ret = true;
      }
      return ret;
    },
    cleanup: function() {
      _.invoke(this._attached, 'detach');
      this._attached = [];
    }
  };

  Backpack.defaultPlugins.push(Backpack.Attachable);

  Backpack.Container = {
    setup: function() {
      if (!this.containerNode) {
        this.containerNode = this.$el;
      }
      if (!this.children) {
        this.children = [];
      }
    },
    getChild: function(index) {
      return this.children[index];
    },
    addView: function(view) {
      this.containerNode.append(view.$el);
    },
    addChild: function(view) {
      this.addView(view);
      this.children.push(view);
    },
    clearChildren: function() {
      var i, _i, _ref;

      for (i = _i = _ref = this.children.length - 1; _i >= 0; i = _i += -1) {
        this.removeChild(i);
      }
    },
    removeChild: function(index) {
      this.children[index].remove();
      this.children.splice(index, 1);
    },
    filterChildren: function(options) {
      _.filter(this.children, function(view) {
        if (view.model.filter(options)) {
          view.$el.show();
        } else {
          view.$el.hide();
        }
      });
    },
    cleanup: function() {
      this.clearChildren();
    }
  };

  Backpack.Publishable = {
    /*
    * Sets up publishers from `publishers` property
    * `publishers` property takes key-value pair of:
    * - key : method name to trigger the event
    * - value : topic name of events to be published
    */

    setup: function() {
      var key, value, _ref;

      this._publishers = [];
      if (this.publishers) {
        _ref = this.publishers;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          this.addPublisher(key, value);
        }
      }
    },
    /*
    * Add publisher
    * @param {String} method Method name to trigger the event
    * @param {String} topic Topic name of events to be published
    * @return {Object} handler object (return value of Backpack.attach)
    */

    addPublisher: function(method, topic) {
      var handler;

      handler = Backpack.attach(this, method, function() {
        var args;

        args = [].slice.call(arguments, 0);
        args.unshift(topic);
        Backbone.trigger.apply(Backbone, args);
      });
      this._publishers.push({
        handler: handler,
        method: method,
        topic: topic
      });
      return handler;
    },
    /*
    * Remove publisher
    * If 1 argument
    * @param {Object} handler Handler object to detach (return value of Backpack.attach)
    * If 2 arguments
    * @param {String} method Method name to trigger the event
    * @param {String} topic Topic name of events to be published
    * @return {Boolean} true if publisher has been removed, false if not
    */

    removePublisher: function() {
      var found, index, publisher, _i, _ref;

      found = -1;
      _ref = this._publishers;
      for (index = _i = _ref.length - 1; _i >= 0; index = _i += -1) {
        publisher = _ref[index];
        if (arguments.length > 1 && _.isString(arguments[0])) {
          if (arguments[0] === publisher.method && arguments[1] === publisher.topic) {
            found = index;
            break;
          }
        } else {
          if (arguments[0] === publisher.handler) {
            found = index;
            break;
          }
        }
      }
      if (found >= 0) {
        this._publishers[found].handler.detach();
        this._publishers.splice(found, 1);
        return true;
      }
      return false;
    },
    /*
    * Remove all publishers on destroy
    */

    cleanup: function() {
      _.each(this._publishers, function(publisher) {
        publisher.handler.detach();
      });
      this._publishers = [];
    }
  };

  Backpack.defaultPlugins.push(Backpack.Publishable);

  Backpack.Singleton = {
    setup: function() {
      var singleton,
        _this = this;

      singleton = _.find(Backpack._singletons, function(s) {
        return s.constructor === _this.constructor;
      });
      if (singleton) {
        throw new Error('Only single instance can be initialized');
      } else {
        if (!Backpack._singletons) {
          Backpack._singletons = [];
        }
        Backpack._singletons.push(this);
      }
    },
    staticProps: {
      getInstance: function() {
        var singleton,
          _this = this;

        singleton = _.find(Backpack._singletons, function(s) {
          return s.constructor === _this;
        });
        if (!singleton) {
          singleton = new this();
        }
        return singleton;
      }
    }
  };

  /*
  * A plugin to use jQuery UI Sortable
  * options :
  *   sortable {Boolean} pass `false` if you don't want to make it sortable on initialization (default `true`)
  *   sortableOptions {Object} initialization option to pass when initializing sortable
  */


  Backpack.Sortable = {
    /*
    * Set sortable on initialize
    * By default, sets sortable. If `sortable` property is given `false`, it doesn't make it sortable.
    */

    setup: function() {
      if (this.sortable !== false) {
        this.setSortable(true);
      }
    },
    _getSortableContainer: function() {
      return this.containerNode || this.$el;
    },
    /*
    * Set this view sortable
    * @param {Boolean} true to enable sortable, false to disable sortable
    */

    setSortable: function(isSortable) {
      var containerNode, options,
        _this = this;

      containerNode = this._getSortableContainer();
      if (isSortable) {
        if (this._sortableInit) {
          containerNode.sortable("enable");
        } else {
          options = {
            start: function(event, ui) {
              ui.item.startIndex = ui.item.index();
            },
            stop: function(event, ui) {
              var collection, model, newIndex;

              collection = _this.collection;
              model = collection.at(ui.item.startIndex);
              newIndex = ui.item.index();
              collection.remove(model);
              collection.add(model, {
                at: newIndex
              });
            }
          };
          if (this.sortableOptions) {
            options = _.extend(options, this.sortableOptions);
          }
          containerNode.sortable(options);
          this._sortableInit = true;
        }
      } else {
        if (this._sortableInit) {
          containerNode.sortable("disable");
        }
      }
    },
    /*
    * Cleanup sortable on destroy
    */

    cleanup: function() {
      if (this._sortableInit) {
        this._getSortableContainer().sortable("destroy");
      }
    }
  };

  Backpack.Subscribable = {
    /*
    * Sets up subscribers from `subscribers` property
    * `subscribers` property takes key-value pair of:
    * - key : topic name of events to subscribe
    * - value : method name of callback function
    */

    setup: function() {
      var key, value, _ref;

      this._subscribers = [];
      if (this.subscribers) {
        _ref = this.subscribers;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          this.addSubscriber(key, value);
        }
      }
    },
    /**
    * Subscribe to topic
    * @param {String} topic Topic name of events to subscribe
    * @param {String|Function} cb Callback function to be called
    */

    addSubscriber: function(topic, cb) {
      if (_.isString(cb)) {
        cb = this[cb];
      }
      this._subscribers.push({
        topic: topic,
        callback: cb
      });
      return Backbone.on(topic, cb, this);
    },
    /**
    * Unsubscribe to topic
    * @param {String} topic Topic name to unsubscribe
    * @param {String|Function} cb Callback function
    * @return {Boolean} true if publisher has been removed, false if not
    */

    removeSubscriber: function(topic, cb) {
      var found, index, subscriber, _i, _ref;

      if (_.isString(cb)) {
        cb = this[cb];
      }
      found = -1;
      _ref = this._subscribers;
      for (index = _i = _ref.length - 1; _i >= 0; index = _i += -1) {
        subscriber = _ref[index];
        if (topic === subscriber.topic && cb === subscriber.callback) {
          found = index;
          break;
        }
      }
      if (found >= 0) {
        if (found !== -1) {
          this._subscribers.splice(found, 1);
        }
        Backbone.off(topic, cb, this);
        return true;
      }
      return false;
    },
    /*
    * Remove all subscribers on destroy
    */

    cleanup: function() {
      var _this = this;

      _.each(this._subscribers, function(subscriber) {
        return Backbone.off(subscriber.topic, subscriber.callback, _this);
      });
      this._subscribers = [];
    }
  };

  Backpack.defaultPlugins.push(Backpack.Subscribable);

  Backpack.ListView = Backpack.View.extend({
    plugins: [Backpack.Container],
    template: _.template('<div class="mainNode"><div class="containerNode"></div><div class="noItemsNode">No Items</div></div><div class="loadingNode">Loading...</div>', this.messages),
    itemClass: Backpack.View,
    initialize: function(options) {
      if (options.itemClass) {
        this.itemClass = options.itemClass;
      }
      this.$el.html(this.template);
      this.containerNode = this.$('.containerNode');
      this._noItemsNode = this.$('.noItemsNode');
      this._mainNode = this.$('.mainNode');
      this._loadingNode = this.$('.loadingNode');
      this.setLoading(false);
      Backpack.View.prototype.initialize.apply(this, arguments);
      this.collection.on("add remove reset", this.render, this);
      this.render();
    },
    render: function() {
      var len, models,
        _this = this;

      models = this.collection.models;
      len = models.length;
      this._showContainerNode(len > 0);
      this.clearChildren();
      if (len > 0) {
        _.each(models, function(model) {
          var child;

          child = _this.createChild(model);
          _this.addChild(child);
        });
      }
      return this;
    },
    _showContainerNode: function(bShow) {
      if (bShow) {
        this._noItemsNode.hide();
        this.containerNode.show();
      } else {
        this._noItemsNode.show();
        this.containerNode.hide();
      }
    },
    createChild: function(model) {
      var view;

      view = new this.itemClass({
        model: model
      });
      return view.render();
    },
    setLoading: function(bLoading) {
      if (bLoading) {
        this._loadingNode.show();
        this._mainNode.hide();
      } else {
        this._loadingNode.hide();
        this._mainNode.show();
      }
    },
    remove: function() {
      this.collection.off("add remove reset", this.render);
      Backpack.View.prototype.remove.call(this);
    }
  });

  /*
  * A view that stacks its children
  */


  Backpack.StackView = Backpack.View.extend({
    plugins: [Backpack.Container],
    /*
    * Constructor
    * @param {Object} [options] Initialization option
    * @param {Backpack.View[]} [options.children] Child views
    * @param {int} [options.selectedIndex=0] Index of child view to be selected
    * @param {Hash} [options.stackEvents] Map to define event handler to select child.
    *    key is child view's 'name' property, and value is child view's method name to trigger selection
    */

    initialize: function(options) {
      var children, selectedIndex,
        _this = this;

      if (options == null) {
        options = {};
      }
      Backpack.View.prototype.initialize.apply(this, arguments);
      children = options.children;
      if (children) {
        _.each(children, function(child) {
          _this.addView(child);
        });
      }
      selectedIndex = options.selectedIndex || 0;
      if (children && ((0 <= selectedIndex && selectedIndex < children.length))) {
        this._selectedView = children[selectedIndex];
      }
      this.render();
    },
    /*
    * Select only one of its children and hide others
    * @returns {Backpack.View} this instance
    */

    render: function() {
      var _this = this;

      _.each(this.children, function(child) {
        if (child === _this._selectedView) {
          _this.selectChild(child);
        } else {
          child.$el.hide();
        }
      });
      return this;
    },
    addView: function(view) {
      var stackEvent, stackEvents, targetView;

      Backpack.Container.addView.apply(this, arguments);
      stackEvents = this.stackEvents;
      if (stackEvents) {
        stackEvent = stackEvents[view.name];
        if (stackEvent) {
          targetView = _.find(this.children, function(child) {
            return child.name === stackEvent.target;
          });
          this.attachView(view, stackEvent.event, targetView);
        }
      }
    },
    /*
    * Attach event of child view to select that view
    * @param {Backpack.View} view Child view
    * @param {String} method Name of the child view method
    */

    attachView: function(view, method, targetView) {
      var _this = this;

      view.attach(view, method, function() {
        _this.selectChild(targetView);
      });
    },
    /*
    * Selects one of its child views
    * @param {int|Backbone.View} child Child view to select
    */

    selectChild: function(child) {
      if (_.isNumber(child)) {
        child = this.children[child];
      }
      if (this._selectedView) {
        this._selectedView.$el.hide();
      }
      child.$el.show();
      this._selectedView = child;
    }
  });

}).call(this);
