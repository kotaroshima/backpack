// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty;

  Backpack.Subscribable = {
    setup: function() {
      var key, value, _ref;

      this._subscribed = [];
      if (this.subscribers) {
        _ref = this.subscribers;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          this.subscribe(key, value);
        }
      }
    },
    /**
    * Subscribe to topic
    * @param {String} topic Topic name to subscribe
    * @param {String|Function} cb Callback function to be called
    */

    subscribe: function(topic, cb) {
      if (_.isString(cb)) {
        cb = this[cb];
      }
      this._subscribed.push([topic, cb]);
      return Backbone.on(topic, cb, this);
    },
    /**
    * Unsubscribe to topic
    * @param {String} topic Topic name to unsubscribe
    * @param {String|Function} cb Callback function
    */

    unsubscribe: function(topic, cb) {
      var found, index, subscribed, _i, _ref;

      if (_.isString(cb)) {
        cb = this[cb];
      }
      found = -1;
      _ref = this._subscribed;
      for (index = _i = _ref.length - 1; _i >= 0; index = _i += -1) {
        subscribed = _ref[index];
        if (topic === subscribed[0] && cb === subscribed[1]) {
          found = index;
          break;
        }
      }
      if (found !== -1) {
        this._subscribed.splice(found, 1);
      }
      return Backbone.off(topic, cb, this);
    },
    cleanup: function() {
      var cb, index, subscribed, _i, _ref;

      _ref = this._subscribed;
      for (index = _i = _ref.length - 1; _i >= 0; index = _i += -1) {
        subscribed = _ref[index];
        this._subscribed.splice(index, 1);
        if (_.isString(cb)) {
          cb = this[cb];
        }
        Backbone.off(topic, cb, this);
      }
    }
  };

  Backpack.defaultPlugins.push(Backpack.Subscribable);

}).call(this);
