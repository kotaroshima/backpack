// Generated by CoffeeScript 1.6.2
/*
* A view that stacks its children
*/


(function() {
  Backpack.StackView = Backpack.View.extend({
    plugins: [Backpack.ContainerPlugin],
    /*
    * Constructor
    * @param {Object} [options={}] Initialization option
    * @param {Backpack.View[]} [options.children] Child views
    * @param {integer} [options.selectedIndex=0] Index of child view to be selected
    * @param {Object} [options.navigationEvents] Map to define event handler to select child.
    *    key is child view's 'name' property, and value is child view's method name to trigger selection
    */

    initialize: function(options) {
      var selectedIndex;

      if (options == null) {
        options = {};
      }
      Backpack.View.prototype.initialize.apply(this, arguments);
      selectedIndex = options.selectedIndex || 0;
      if (this.children && ((0 <= selectedIndex && selectedIndex < this.children.length))) {
        this._selectedView = this.children[selectedIndex];
      }
      this.render();
    },
    /*
    * Select only one of its children and hide others
    * @returns {Backpack.View} this instance
    */

    render: function() {
      var _this = this;

      _.each(this.children, function(child) {
        if (child === _this._selectedView) {
          _this.selectChild(child);
        } else {
          child.$el.hide();
        }
      });
      return this;
    },
    /*
    * Override Backpack.ContainerPlugin to attach navigation events
    * @param {Backbone.View} view A view to add
    */

    addView: function(view) {
      var eventDef, navigationEvents, stackEvent,
        _this = this;

      Backpack.ContainerPlugin.addView.apply(this, arguments);
      navigationEvents = this.navigationEvents;
      if (navigationEvents) {
        stackEvent = navigationEvents[view.name];
        if (stackEvent) {
          if (_.isArray(stackEvent)) {
            eventDef = stackEvent;
          } else {
            eventDef = [stackEvent];
          }
          _.each(eventDef, function(def) {
            var targetView;

            targetView = _.find(_this.children, function(child) {
              return child.name === def.target;
            });
            return _this.attachView(view, def.event, targetView);
          });
        }
      }
    },
    /*
    * Attach event of child view to select that view
    * @param {Backpack.View} view Child view
    * @param {String} method Name of the child view method
    * @param {Backpack.View} targetView Child view to navigate to
    */

    attachView: function(view, method, targetView) {
      var _this = this;

      view.attach(view, method, function() {
        _this.selectChild(targetView);
      });
    },
    /*
    * Selects one of its child views
    * @param {integer|Backbone.View} child Child view to select
    */

    selectChild: function(child) {
      if (_.isNumber(child)) {
        child = this.children[child];
      }
      if (this._selectedView) {
        this._selectedView.$el.hide();
      }
      child.$el.show();
      this._selectedView = child;
    }
  });

}).call(this);
