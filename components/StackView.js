// Generated by CoffeeScript 1.6.2
/*
* A view that stacks its children
*/


(function() {
  Backpack.StackView = Backpack.View.extend({
    plugins: [Backpack.ContainerPlugin],
    /*
    * Constructor
    * @param {Object} [options={}] Initialization option
    * @param {Backpack.View[]} [options.children] Child views
    * @param {integer} [options.showIndex=0] Index of child view to show on init
    * @param {Object} [options.navigationEvents] Map to define event handler to show child.
    *    key is child view's 'name' property, and value is child view's method name to trigger selection
    */

    initialize: function(options) {
      var showIndex;

      if (options == null) {
        options = {};
      }
      Backpack.View.prototype.initialize.apply(this, arguments);
      this.$el.css({
        position: "relative",
        width: "100%"
      });
      showIndex = options.showIndex || 0;
      if (this.children && ((0 <= showIndex && showIndex < this.children.length))) {
        this._currentView = this.children[showIndex];
        this._previousView = this._currentView;
      }
      this.render();
    },
    /*
    * Select only one of its children and hide others
    * @returns {Backpack.View} this instance
    */

    render: function() {
      var _this = this;

      _.each(this.children, function(child) {
        if (child === _this._currentView) {
          child.$el.show();
        } else {
          child.$el.hide();
        }
      });
      return this;
    },
    /*
    * Override Backpack.ContainerPlugin to attach navigation events
    * @param {Backbone.View} view A view to add
    */

    addView: function(view) {
      var eventDef, navigationEvents, stackEvent,
        _this = this;

      view.$el.css({
        position: "absolute",
        width: "100%"
      });
      Backpack.ContainerPlugin.addView.apply(this, arguments);
      navigationEvents = this.navigationEvents;
      if (navigationEvents) {
        stackEvent = navigationEvents[view.name];
        if (stackEvent) {
          if (_.isArray(stackEvent)) {
            eventDef = stackEvent;
          } else {
            eventDef = [stackEvent];
          }
          _.each(eventDef, function(def) {
            _this.attachNavigationEvent(view, def);
          });
        }
      }
    },
    /*
    * Attaches event of child view to show that view
    * @param {Backpack.View} view Child view
    * @param {Object} navigationDef map to define navigation event
    * @param {String} navigationDef.event Method name to trigger navigation event
    * @param {String} [navigationDef.target] `name` property of target view
    * @param {boolean} [navigationDef.back] if true, shows previously shown child view
    */

    attachNavigationEvent: function(view, navigationDef) {
      var targetView,
        _this = this;

      if (navigationDef.back === true) {
        view.attach(view, navigationDef.event, function() {
          _this.showPreviousChild();
        });
      } else {
        targetView = _.find(this.children, function(child) {
          return child.name === navigationDef.target;
        });
        view.attach(view, navigationDef.event, function() {
          _this.showChild(targetView);
        });
      }
    },
    /*
    * Hides previously shown child view and shows another child view
    * @param {integer|Backbone.View} child Child view instance or index to show
    */

    showChild: function(child) {
      var bBack, hideDir, showDir;

      if (_.isNumber(child)) {
        child = this.children[child];
      }
      bBack = _.indexOf(this.children, child) < _.indexOf(this.children, this._currentView);
      if (this._currentView) {
        hideDir = bBack ? "right" : "left";
        this._currentView.$el.hide("slide", {
          direction: hideDir
        }, "slow");
      }
      showDir = bBack ? "left" : "right";
      child.$el.show("slide", {
        direction: showDir
      }, "slow");
      this._previousView = this._currentView;
      this._currentView = child;
    },
    /*
    * Shows previously shown child view again and hides currently shown child view
    */

    showPreviousChild: function() {
      if (this._previousView) {
        this.showChild(this._previousView);
      }
    }
  });

}).call(this);
