// Generated by CoffeeScript 1.6.2
/**
* A view that that displays view specified in `itemView`
*/


(function() {
  Backpack.ListView = Backpack.View.extend({
    plugins: [Backpack.TemplatePlugin, Backpack.ContainerPlugin],
    messages: {
      NO_ITEMS: 'No Items'
    },
    template: '<div class="main-node"><div class="container-node"></div><div class="message-node"></div></div><div class="loading-node">Loading...</div>',
    templateNodes: {
      containerNode: '.container-node',
      messageNode: '.message-node',
      mainNode: '.main-node',
      loadingNode: '.loading-node'
    },
    itemView: Backpack.View,
    initialize: function(options) {
      if (options.itemView) {
        this.itemView = options.itemView;
      }
      Backpack.View.prototype.initialize.apply(this, arguments);
      this.setLoading(false);
      this.collection.on('add reset', this.render, this);
      this.collection.on('remove', this.onRemoveModel, this);
      this.render();
    },
    render: function() {
      var _this = this;

      this.toggleContainerNode(this.collection.models.length > 0, this.messages.NO_ITEMS);
      this.clearChildren();
      _.each(this.collection.models, function(model) {
        var child;

        child = _this.createChild(model);
        _this.addChild(child);
      });
      return this;
    },
    /**
    * Show list items if collection has one or more model
    * and show "No items" message instead if collection includes no models
    * @param {boolean} bShow specify true to show container node, false to hide container node and show message node instead
    * @param {String} message a message to show for bShow=false
    */

    toggleContainerNode: function(bShow, message) {
      var containerNode, messageNode;

      messageNode = this.messageNode;
      containerNode = this.containerNode;
      if (bShow) {
        messageNode.hide();
        containerNode.show();
      } else {
        messageNode.html(message);
        messageNode.show();
        containerNode.hide();
      }
    },
    /**
    * Creates view to add to this list view as a child
    * @param {Backbone.Model} model
    * @return {Backbone.View}
    */

    createChild: function(model) {
      var options, view;

      options = _.clone(this.itemOptions || {});
      options = _.extend(options, {
        model: model
      });
      view = new this.itemView(_.extend(options, {
        model: model
      }));
      view.$el.addClass('item-view');
      return view.render();
    },
    onRemoveModel: function(model) {
      var child, children, i, _i, _ref,
        _this = this;

      children = this.children;
      for (i = _i = _ref = children.length - 1; _i >= 0; i = _i += -1) {
        child = children[i];
        if (child.model === model) {
          child.$el.hide('slide', {
            direction: 'left'
          }, 'fast', function() {
            _this.removeChild(child);
            _this.toggleContainerNode(_this.collection.models.length > 0, _this.messages.NO_ITEMS);
          });
          break;
        }
      }
    },
    /**
    * Toggle show/hide loading node
    * @param {boolean} bLoading true to show loading node, false to hide
    */

    setLoading: function(bLoading) {
      if (bLoading) {
        this.loadingNode.show();
        this.mainNode.hide();
      } else {
        this.loadingNode.hide();
        this.mainNode.show();
      }
    },
    remove: function() {
      this.collection.off('add reset', this.render);
      this.collection.off('remove', this.onRemoveModel);
      Backpack.View.prototype.remove.call(this);
    }
  });

}).call(this);
