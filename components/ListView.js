// Generated by CoffeeScript 1.6.2
/*
* A view that that displays view specified in `itemView`
*/


(function() {
  Backpack.ListView = Backpack.View.extend({
    plugins: [Backpack.ContainerPlugin],
    template: _.template('<div class="main-node"><div class="containerNode"></div><div class="noItemsNode">No Items</div></div><div class="loadingNode">Loading...</div>', this.messages),
    itemView: Backpack.View,
    itemOptions: {},
    initialize: function(options) {
      if (options.itemView) {
        this.itemView = options.itemView;
      }
      this.$el.html(this.template);
      this.containerNode = this.$('.containerNode');
      this._noItemsNode = this.$('.noItemsNode');
      this._mainNode = this.$('.main-node');
      this._loadingNode = this.$('.loadingNode');
      this.setLoading(false);
      Backpack.View.prototype.initialize.apply(this, arguments);
      this.collection.on('add reset', this.render, this);
      this.collection.on('remove', this.onRemoveModel, this);
      this.render();
    },
    render: function() {
      var _this = this;

      this._toggleContainerNode();
      this.clearChildren();
      _.each(this.collection.models, function(model) {
        var child;

        child = _this.createChild(model);
        _this.addChild(child);
      });
      return this;
    },
    /*
    * Show list items if collection has one or more model
    * and show "No items" message instead if collection includes no models
    */

    _toggleContainerNode: function() {
      if (this.collection.models.length > 0) {
        this._noItemsNode.hide();
        this.containerNode.show();
      } else {
        this._noItemsNode.show();
        this.containerNode.hide();
      }
    },
    /*
    * Creates view to add to this list view as a child
    * @param {Backbone.Model} model
    * @return {Backbone.View}
    */

    createChild: function(model) {
      var options, view;

      options = _.clone(this.itemOptions);
      options = _.extend(options, {
        model: model
      });
      view = new this.itemView(_.extend(options, {
        model: model
      }));
      view.$el.addClass('item-view');
      return view.render();
    },
    onRemoveModel: function(model) {
      var child, children, i, _i, _ref,
        _this = this;

      children = this.children;
      for (i = _i = _ref = children.length - 1; _i >= 0; i = _i += -1) {
        child = children[i];
        if (child.model === model) {
          child.$el.hide('slide', {
            direction: 'left'
          }, 'fast', function() {
            _this.removeChild(child);
            _this._toggleContainerNode();
          });
          break;
        }
      }
    },
    /*
    * Toggle show/hide loading node
    * @param {boolean} bLoading true to show loading node, false to hide
    */

    setLoading: function(bLoading) {
      if (bLoading) {
        this._loadingNode.show();
        this._mainNode.hide();
      } else {
        this._loadingNode.hide();
        this._mainNode.show();
      }
    },
    remove: function() {
      this.collection.off('add reset', this.render);
      this.collection.off('remove', this.onRemoveModel);
      Backpack.View.prototype.remove.call(this);
    }
  });

}).call(this);
