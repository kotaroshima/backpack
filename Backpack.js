// Generated by CoffeeScript 1.4.0
(function() {
  var Backpack, Clazz, cleanup, extend, root, setup,
    __hasProp = {}.hasOwnProperty;

  root = this;

  Backpack = root.Backpack = {};

  Backpack.attach = function(context, method, callback) {
    var origFunc;
    origFunc = context[method];
    context[method] = function() {
      var ret;
      ret = origFunc.apply(context, arguments);
      if (callback) {
        callback.apply(this, arguments);
      }
      return ret;
    };
    return {
      detach: function() {
        context[method] = origFunc;
      }
    };
  };

  Backpack.defaultPlugins = [];

  setup = function(self, options) {
    var key, setups, value;
    if (options == null) {
      options = {};
    }
    for (key in options) {
      if (!__hasProp.call(options, key)) continue;
      value = options[key];
      if (key === 'plugins') {
        self[key] = _.clone(Backpack.defaultPlugins).concat(options.plugins);
      } else {
        self[key] = value;
      }
    }
    setups = [];
    _.each(self.plugins, function(pi) {
      for (key in pi) {
        if (!__hasProp.call(pi, key)) continue;
        value = pi[key];
        if (key !== 'setup' && key !== 'cleanup' && key !== 'staticProps') {
          self[key] = value;
        }
      }
      if (pi.setup) {
        setups.push(pi.setup);
      }
      if (pi.cleanup) {
        if (!self.cleanups) {
          self.cleanups = [];
        }
        self.cleanups.push(pi.cleanup);
      }
    });
    _.each(setups, function(su) {
      su.apply(self);
    });
  };

  cleanup = function(self) {
    _.each(self.cleanups, function(cu) {
      cu.apply(self);
    });
  };

  extend = function(protoProps, staticProps) {
    var child;
    child = Backbone.Model.extend.call(this, protoProps, staticProps);
    child.prototype.plugins = _.clone(Backpack.defaultPlugins).concat(protoProps.plugins || []);
    _.each(protoProps.plugins, function(pi) {
      if (pi.staticProps) {
        _.extend(child, pi.staticProps);
      }
    });
    return child;
  };

  Clazz = Backpack.Class = function() {
    this.cid = _.uniqueId('obj');
    this.initialize.apply(this, arguments);
  };

  _.extend(Clazz.prototype, Backbone.Events, {
    initialize: function() {
      var options;
      options = arguments.length > 0 ? arguments[arguments.length - 1] : {};
      setup(this, options);
    },
    destroy: function() {
      cleanup(this);
    }
  });

  Clazz.extend = extend;

  Backpack.Model = Backbone.Model.extend({
    initialize: function(attributes, options) {
      Backbone.Model.prototype.initialize.apply(this, arguments);
      setup(this, options);
    },
    destroy: function(options) {
      cleanup(this);
      Backbone.Model.prototype.destroy.apply(this, arguments);
    }
  });

  Backpack.Model.extend = extend;

  Backpack.Collection = Backbone.Collection.extend({
    initialize: function(models, options) {
      Backbone.Collection.prototype.initialize.apply(this, arguments);
      setup(this, options);
    },
    destroy: function() {
      cleanup(this);
    }
  });

  Backpack.Collection.extend = extend;

  Backpack.View = Backbone.View.extend({
    initialize: function(options) {
      Backbone.View.prototype.initialize.apply(this, arguments);
      setup(this, options);
    },
    remove: function() {
      cleanup(this);
      Backbone.View.prototype.remove.apply(this, arguments);
    }
  });

  Backpack.View.extend = extend;

  Backpack.Subscribable = {
    setup: function() {
      var cb, key, value, _ref;
      if (this.subscribers) {
        _ref = this.subscribers;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          cb = _.isString(value) ? this[value] : value;
          Backbone.on(key, cb, this);
        }
      }
    },
    cleanup: function() {
      var cb, key, value, _ref;
      if (this.subscribers) {
        _ref = this.subscribers;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          cb = _.isString(value) ? this[value] : value;
          Backbone.off(key, cb, this);
        }
      }
    }
  };

  Backpack.defaultPlugins.push(Backpack.Subscribable);

  Backpack.Publishable = {
    setup: function() {
      var key, value, _ref;
      if (this.publishers) {
        _ref = this.publishers;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          this.attachTrigger(key, value);
        }
      }
    },
    attachTrigger: function(method, topic) {
      Backpack.attach(this, method, function() {
        var args;
        args = [].slice.call(arguments, 0);
        args.unshift(topic);
        Backbone.trigger.apply(Backbone, args);
      });
    }
  };

  Backpack.defaultPlugins.push(Backpack.Publishable);

}).call(this);
