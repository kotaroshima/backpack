// Generated by CoffeeScript 1.4.0
(function() {
  var Backpack, Publishable, Subscribable, cleanup, insertTrigger, setup,
    __hasProp = {}.hasOwnProperty;

  if (window.Backpack == null) {
    Backpack = window.Backpack = {};
  }

  Subscribable = {
    setup: function() {
      var cb, key, value, _ref;
      if (this.subscribers) {
        _ref = this.subscribers;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          cb = _.isString(value) ? this[value] : value;
          Backbone.on(key, cb, this);
        }
      }
    },
    cleanup: function() {
      var cb, key, value, _ref;
      if (this.subscribers) {
        _ref = this.subscribers;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          cb = _.isString(value) ? this[value] : value;
          Backbone.off(key, cb, this);
        }
      }
    }
  };

  insertTrigger = function(self, key, value) {
    var newFunc, origFunc;
    if (_.isFunction(self[key])) {
      origFunc = self[key];
      newFunc = function() {
        var args, ret;
        ret = origFunc.apply(this, arguments);
        args = Array.splice.call(arguments, 0, 0, value);
        Backbone.trigger.apply(this, args);
        return ret;
      };
      self[key] = _.bind(newFunc, self);
    }
  };

  Publishable = {
    setup: function() {
      var key, value, _ref;
      if (this.publishers) {
        _ref = this.publishers;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          insertTrigger(this, key, value);
        }
      }
    }
  };

  setup = function(self, options) {
    var key, plugins, setups, value;
    if (options == null) {
      options = {};
    }
    for (key in options) {
      if (!__hasProp.call(options, key)) continue;
      value = options[key];
      self[key] = _.isFunction(value) ? _.bind(value, self) : value;
    }
    self.cleanups = [];
    setups = [];
    plugins = [Subscribable, Publishable];
    if (options != null ? options.plugins : void 0) {
      plugins = plugins.concat(options.plugins);
    }
    _.each(plugins, function(pi) {
      var cu, su;
      su = pi.setup;
      cu = pi.cleanup;
      for (key in pi) {
        if (!__hasProp.call(pi, key)) continue;
        value = pi[key];
        if (key !== 'setup' && key !== 'cleanup') {
          self[key] = _.isFunction(value) ? _.bind(value, self) : value;
        }
      }
      if (su) {
        setups.push(su);
      }
      if (cu) {
        self.cleanups.push(cu);
      }
    });
    _.each(setups, function(su) {
      su.apply(self);
    });
  };

  cleanup = function(self) {
    _.each(self.cleanups, function(cu) {
      cu.apply(self);
    });
  };

  Backpack.Model = Backbone.Model.extend({
    initialize: function(attributes, options) {
      Backbone.Model.prototype.initialize.apply(this, arguments);
      setup(this, options);
    },
    destroy: function(options) {
      cleanup(this);
      Backbone.Model.prototype.destroy.apply(this, arguments);
    }
  });

  Backpack.Collection = Backbone.Collection.extend({
    initialize: function(models, options) {
      Backbone.Collection.prototype.initialize.apply(this, arguments);
      setup(this, options);
    },
    destroy: function() {
      cleanup(this);
    }
  });

  Backpack.View = Backbone.View.extend({
    initialize: function(options) {
      Backbone.View.prototype.initialize.apply(this, arguments);
      setup(this, options);
    },
    remove: function() {
      cleanup(this);
      Backbone.View.prototype.remove.apply(this, arguments);
    }
  });

  Backpack.Class = function() {
    this.initialize.apply(this, arguments);
  };

  _.extend(Backpack.Class.prototype, Backbone.Events, {
    initialize: function() {
      var options;
      options = arguments.length > 0 ? arguments[arguments.length - 1] : {};
      setup(this, options);
    },
    destroy: function() {
      cleanup(this);
    }
  });

  Backpack.Class.extend = Backbone.Model.extend;

}).call(this);
